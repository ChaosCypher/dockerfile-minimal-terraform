---
name: ci
on:
  pull_request:
    branches:
      - main
    types:
      - edited
      - opened
      - reopened
      - synchronize
      - ready_for_review
      
concurrency:
  group: ci-${{ github.head_ref || github.run_id }}-1
  cancel-in-progress: true

jobs:
  lint:
    runs-on: ubuntu-22.04
    steps:
      - name: checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: lint code base
        uses: super-linter/super-linter/slim@v5
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-image:
    needs: [lint]
    runs-on: ubuntu-22.04
    services:
      registry:
        image: registry:2.8.1@sha256:7c8b70990dad7e4325bf26142f59f77c969c51e079918f4631767ac8d49e22fb
        ports:
          - 5000:5000
    steps:
      - name: checkout branch
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: set up docker buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: |
            image=moby/buildkit:v0.11.5@sha256:bad778bd243302aafb13a84b562c0c6f157c7e088fa45edce5bf5741f7c4776e
            network=host

      - name: Build and push
        id: build-and-push
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/arm/v6,linux/arm/v7,linux/arm64,linux/386,linux/amd64,linux/riscv64,linux/ppc64le,linux/s390x
          push: true
          tags: localhost:5000/chaoscypher/minimal-terraform:${{ github.event.pull_request.number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          sbom: true
          provenance: true

      - name: pull image
        run: docker pull localhost:5000/chaoscypher/minimal-terraform:${{ github.event.pull_request.number }}

      - name: export image
        run: docker save -o /tmp/images.tar localhost:5000/chaoscypher/minimal-terraform:${{ github.event.pull_request.number }}

      - name: store artifact
        uses: actions/upload-artifact@v3
        with:
          name: container-artifact
          path: /tmp/images.tar
          
  scan-container:
    needs: [build-image]
    runs-on: ubuntu-22.04
    steps:
      - name: get artifact
        uses: actions/github-script@v6
        with:
          script: |
            let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: ${{ github.event.workflow_run.id }},
            });
            let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "container-artifact"
            })[0];
            let download = await github.rest.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            let fs = require('fs');
            fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/container-artifact.zip`, Buffer.from(download.data));
            
      - name: unzip artifact
        run: unzip container-artifact.zip

      - name: load image
        run: docker load --input ./images.tar

      - name: cve scan
        uses: aquasecurity/trivy-action@master
        with:
          input: /github/workspace/images.tar
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
