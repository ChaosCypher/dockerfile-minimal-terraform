---
name: build and release
on:
  pull_request:
    branches:
      - main
    types:
      - closed
    paths:
      - Dockerfile
      - hashicorp.asc

permissions:
  contents: write
  issues: read
  pull-requests: read

env:
  REGISTRY_IMAGE: chaoscypher/minimal-terraform

jobs:
  list-changed-files:
    runs-on: "ubuntu-latest"
    outputs:
      changedFiles: ${{ steps.list-changed-files.outputs.result }}
    steps:
      - uses: actions/checkout@v4.1.1

      - name: List Changed Files
        id: list-changed-files
        uses: actions/github-script@v7.0.1
        with:
          script: |
            const response = await github.request('GET /repos/{owner}/{repo}/pulls/{pull_number}/files', {
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number
            });
            const files = response.data.map(file => file.filename);
            console.log(files)
            return { changedFiles: files };

  auto-semver-release:
    needs: [list-changed-files]
    if: >-
      ${{
        (
        contains(needs.list-changed-files.outputs.changedFiles, 'Dockerfile') ||
        contains(needs.list-changed-files.outputs.changedFiles, 'ci.yaml') ||
        contains(needs.list-changed-files.outputs.changedFiles, 'hashicorp.asc')
        ) && (
        github.event.pull_request.merged
        )
      }}
    runs-on: ubuntu-22.04
    outputs:
      version: ${{ steps.increment-version.outputs.result }}
      major-version: ${{ steps.increment-version.outputs.major-version }}
      minor-version: ${{ steps.increment-version.outputs.minor-version }}
      patch-version: ${{ steps.increment-version.outputs.patch-version }}
    steps:
      - name: increment version
        id: increment-version
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            let latestReleaseVersion = '';

            try {
              const getLatestReleaseParams = {
                owner: context.repo.owner,
                repo: context.repo.repo
              };
              console.log("call repos.getLatestRelease:", getLatestReleaseParams);
              const latestRelease = await github.rest.repos.getLatestRelease(getLatestReleaseParams);
              latestReleaseVersion = latestRelease.data.tag_name;
            } catch (e) {
              if (e.status === 404) {
                latestReleaseVersion = '0.0.0';
              } else {
                throw e;
              }
            }

            const listPullRequestsAssociatedWithCommitParams = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: '${{ github.sha }}',
            };
            console.log("call repos.listPullRequestsAssociatedWithCommit:", listPullRequestsAssociatedWithCommitParams);
            const pulls = await github.paginate(
              github.rest.repos.listPullRequestsAssociatedWithCommit,
              listPullRequestsAssociatedWithCommitParams
            );
            const labels = pulls.flatMap(p => p.labels.map(l => l.name));
            const tagNames = latestReleaseVersion.split('.');
            let version = [];

            if (labels.includes('major release')) {
              version = [Number(tagNames[0]) + 1, 0, 0];
            } else if (labels.includes('minor release')) {
              version = [tagNames[0], Number(tagNames[1]) + 1, 0];
            } else {
              version = [tagNames[0], tagNames[1], Number(tagNames[2]) + 1];
            }
            
            core.setOutput('major-version', version[0])
            core.setOutput('minor-version', version[1])
            core.setOutput('patch-version', version[2])
            
            return version.join('.');

  promote-image:
    needs: [list-changed-files]
    if: >-
      ${{
        (
        contains(needs.list-changed-files.outputs.changedFiles, 'Dockerfile') ||
        contains(needs.list-changed-files.outputs.changedFiles, 'ci.yaml') ||
        contains(needs.list-changed-files.outputs.changedFiles, 'hashicorp.asc')
        ) && (
        github.event.pull_request.merged
        )
      }}
    runs-on: ubuntu-22.04
    steps:
      - name: Log in to Dockerhub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Release Docker Image
        shell: bash
        run: |
          docker pull "${{ env.REGISTRY_IMAGE }}:pr-${{ github.event.number }}"

          SHA="$(docker inspect --format='{{index (split (index .Id) ":") 1}}' \
              ${{ env.REGISTRY_IMAGE }}:pr-${{ github.event.number }})"

          docker buildx imagetools create \
                 -t "${{ env.REGISTRY_IMAGE }}:${{ needs.jobs.auto-semver-release.outputs.version }}" \
                    "${{ env.REGISTRY_IMAGE }}:pr-${{ github.event.number }}" \
                 -t "${{ env.REGISTRY_IMAGE }}:${SHA}" \
                    "${{ env.REGISTRY_IMAGE }}:pr-${{ github.event.number }}""
            
      - name: create release
        uses: actions/github-script@v7
        env:
          GITHUB_REF: ${{ env.GITHUB_REF }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const createReleaseParams = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: '${{ needs.jobs.auto-semver-release.outputs.version }}',
              target_commitish: process.env['GITHUB_REF'],
              generate_release_notes: true
            };
            console.log("call repos.createRelease:", createReleaseParams);
            await github.rest.repos.createRelease(createReleaseParams);
